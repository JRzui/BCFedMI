package consensus

import (
	"math"
	"math/big"
)

//HashRatio calculates a float number between [0, 1] with a random hash value which generated by vrf
func HashRatio(vrfOutput []byte) float64 {
	t := &big.Int{}
	t.SetBytes(vrfOutput[:])

	z := new(big.Int).Exp(big.NewInt(2), big.NewInt(int64(len(vrfOutput)*8)), nil)
	ratio := big.Float{}
	cratio, _ := ratio.Quo(new(big.Float).SetInt(t), new(big.Float).SetInt(z)).Float64()
	return cratio
}

func Sortition(Select int, WeightTotal int, weight int, vrfOutput []byte) int {
	p := float64(Select) / float64(WeightTotal)
	ratio := HashRatio(vrfOutput)
	j := 0
	for ; j < weight; j++ {
		B_left := 0.0
		for k := 0; k <= j; k++ {
			B_left += Bernoulli(k, weight, p)
		}
		B_right := B_left + Bernoulli(j+1, weight, p)
		if ratio >= B_left && ratio < B_right {
			return j
		}
	}
	return -1
}

func Bernoulli(k int, w int, p float64) float64 {
	if k == 0 || k == w {
		return math.Pow(p, float64(k)) * math.Pow(1-p, float64(w-k))
	} else {
		return float64(Permutation(w)/(Permutation(k)*Permutation(w-k))) * math.Pow(p, float64(k)) * math.Pow(1-p, float64(w-k))
	}
}

func Permutation(n int) int {
	res := 1
	for i := 1; i <= n; i++ {
		res = res * i
	}
	return res
}
